From 37384507148a9782d5dcb202cb1c5588a27d7a66 Mon Sep 17 00:00:00 2001
From: naz664 <nazimnavas145@gmail.com>
Date: Sun, 22 Jan 2023 03:51:19 +0000
Subject: [PATCH 1/5] Revert udfps: Implement framework dimming support

This revert the custom dimming suupport added by ArrowOS team

This makes it easier to implement FOD on GSI's
---
 .../systemui/biometrics/UdfpsController.java  | 85 +------------------
 1 file changed, 1 insertion(+), 84 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index e5705edd7675..756ba51d5b12 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -43,7 +43,6 @@ import android.os.Process;
 import android.os.Trace;
 import android.os.VibrationAttributes;
 import android.os.VibrationEffect;
-import android.provider.Settings;
 import android.util.Log;
 import android.util.RotationUtils;
 import android.view.LayoutInflater;
@@ -60,7 +59,6 @@ import com.android.keyguard.KeyguardUpdateMonitor;
 import com.android.systemui.R;
 import com.android.systemui.animation.ActivityLaunchAnimator;
 import com.android.systemui.biometrics.dagger.BiometricsBackground;
-import com.android.systemui.biometrics.UdfpsControllerOverlay;
 import com.android.systemui.dagger.SysUISingleton;
 import com.android.systemui.dagger.qualifiers.Main;
 import com.android.systemui.doze.DozeReceiver;
@@ -68,7 +66,6 @@ import com.android.systemui.dump.DumpManager;
 import com.android.systemui.keyguard.ScreenLifecycle;
 import com.android.systemui.plugins.FalsingManager;
 import com.android.systemui.plugins.statusbar.StatusBarStateController;
-import com.android.systemui.R;
 import com.android.systemui.statusbar.LockscreenShadeTransitionController;
 import com.android.systemui.statusbar.VibratorHelper;
 import com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager;
@@ -173,9 +170,6 @@ public class UdfpsController implements DozeReceiver {
     private final Set<Callback> mCallbacks = new HashSet<>();
     private final int mUdfpsVendorCode;
 
-    private boolean mFrameworkDimming;
-    private int[][] mBrightnessAlphaArray;
-
     @VisibleForTesting
     public static final VibrationAttributes UDFPS_VIBRATION_ATTRIBUTES =
             new VibrationAttributes.Builder()
@@ -234,6 +228,7 @@ public class UdfpsController implements DozeReceiver {
                     Log.d(TAG, "hiding udfps overlay when "
                             + "mKeyguardUpdateMonitor.isFingerprintDetectionRunning()=true");
                 }
+
                 UdfpsController.this.hideUdfpsOverlay();
             });
         }
@@ -721,8 +716,6 @@ public class UdfpsController implements DozeReceiver {
 
     private void showUdfpsOverlay(@NonNull UdfpsControllerOverlay overlay) {
         mExecution.assertIsMainThread();
-        mFrameworkDimming = mContext.getResources().getBoolean(R.bool.config_udfpsFrameworkDimming);
-        parseBrightnessAlphaArray();
 
         mOverlay = overlay;
         final int requestReason = overlay.getRequestReason();
@@ -850,62 +843,6 @@ public class UdfpsController implements DozeReceiver {
         mIsAodInterruptActive = false;
     }
 
-    private static int interpolate(int x, int xa, int xb, int ya, int yb) {
-        return ya - (ya - yb) * (x - xa) / (xb - xa);
-    }
-
-    private int getBrightness() {
-        int brightness = Settings.System.getInt(mContext.getContentResolver(),
-                    Settings.System.SCREEN_BRIGHTNESS, 100);
-        // Since the brightness is taken from the system settings, we need to interpolate it
-        final int brightnessMin = mContext.getResources().getInteger(R.integer.config_udfpsDimmingBrightnessMin);
-        final int brightnessMax = mContext.getResources().getInteger(R.integer.config_udfpsDimmingBrightnessMax);
-        if (brightnessMax > 0) {
-            brightness = interpolate(brightness, 0, 255, brightnessMin, brightnessMax);
-        }
-        return brightness;
-    }
-
-    private void updateViewDimAmount(boolean pressed) {
-        if (mFrameworkDimming) {
-            if (pressed) {
-                int curBrightness = getBrightness();
-                int i, dimAmount;
-                for (i = 0; i < mBrightnessAlphaArray.length; i++) {
-                    if (mBrightnessAlphaArray[i][0] >= curBrightness) break;
-                }
-                if (i == 0) {
-                    dimAmount = mBrightnessAlphaArray[i][1];
-                } else if (i == mBrightnessAlphaArray.length) {
-                    dimAmount = mBrightnessAlphaArray[i-1][1];
-                } else {
-                    dimAmount = interpolate(curBrightness,
-                            mBrightnessAlphaArray[i][0], mBrightnessAlphaArray[i-1][0],
-                            mBrightnessAlphaArray[i][1], mBrightnessAlphaArray[i-1][1]);
-                }
-                // Call the function in UdfpsOverlayController with dimAmount
-                mOverlay.updateDimAmount(dimAmount / 255.0f);
-            } else {
-                // Call the function in UdfpsOverlayController with dimAmount
-                mOverlay.updateDimAmount(0.0f);
-            }
-        }
-    }
-
-    private void parseBrightnessAlphaArray() {
-        mFrameworkDimming = mContext.getResources().getBoolean(R.bool.config_udfpsFrameworkDimming);
-        if (mFrameworkDimming) {
-            String[] array = mContext.getResources().getStringArray(
-                    R.array.config_udfpsDimmingBrightnessAlphaArray);
-            mBrightnessAlphaArray = new int[array.length][2];
-            for (int i = 0; i < array.length; i++) {
-                String[] s = array[i].split(",");
-                mBrightnessAlphaArray[i][0] = Integer.parseInt(s[0]);
-                mBrightnessAlphaArray[i][1] = Integer.parseInt(s[1]);
-            }
-        }
-    }
-
     public boolean isFingerDown() {
         return mOnFingerDown;
     }
@@ -918,8 +855,6 @@ public class UdfpsController implements DozeReceiver {
             return;
         }
 
-        updateViewDimAmount(true);
-
         if (!mOverlay.matchesRequestId(requestId)) {
             Log.w(TAG, "Mismatched fingerDown: " + requestId
                     + " current: " + mOverlay.getRequestId());
@@ -1004,24 +939,6 @@ public class UdfpsController implements DozeReceiver {
             mCancelAodTimeoutAction = null;
         }
         mIsAodInterruptActive = false;
-
-        // Add a delay to ensure that the dim amount is updated after the display
-        // has had chance to switch out of HBM mode.
-        // The delay, in ms is stored in config_udfpsDimmingDisableDelay.
-        // If the delay is 0, the dim amount will be updated immediately.
-        final int delay = mContext.getResources().getInteger(
-                R.integer.config_udfpsDimmingDisableDelay);
-        if (delay > 0) {
-            mFgExecutor.executeDelayed(() -> {
-                // A race condition exists where the overlay is destroyed before the the dim amount is updated.
-                // This check ensures that the overlay is still valid.
-                if (mOverlay != null && mOverlay.matchesRequestId(requestId)) {
-                    updateViewDimAmount(false);
-                }
-            }, delay);
-        } else {
-            updateViewDimAmount(false);
-        }
     }
 
     /**
-- 
2.25.1

